// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "quasardb_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// _qdb_build
std::string _qdb_build();
RcppExport SEXP _quasardb__qdb_build() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_qdb_build());
    return rcpp_result_gen;
END_RCPP
}
// _qdb_connect
qdb_handle_t _qdb_connect(const std::string& uri);
RcppExport SEXP _quasardb__qdb_connect(SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(_qdb_connect(uri));
    return rcpp_result_gen;
END_RCPP
}
// _qdb_error
std::string _qdb_error(int ierr);
RcppExport SEXP _quasardb__qdb_error(SEXP ierrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ierr(ierrSEXP);
    rcpp_result_gen = Rcpp::wrap(_qdb_error(ierr));
    return rcpp_result_gen;
END_RCPP
}
// _qdb_query_find
Rcpp::StringVector _qdb_query_find(qdb_handle_t handle, const std::string& query);
RcppExport SEXP _quasardb__qdb_query_find(SEXP handleSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< qdb_handle_t >::type handle(handleSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(_qdb_query_find(handle, query));
    return rcpp_result_gen;
END_RCPP
}
// _qdb_version
std::string _qdb_version();
RcppExport SEXP _quasardb__qdb_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_qdb_version());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quasardb__qdb_build", (DL_FUNC) &_quasardb__qdb_build, 0},
    {"_quasardb__qdb_connect", (DL_FUNC) &_quasardb__qdb_connect, 1},
    {"_quasardb__qdb_error", (DL_FUNC) &_quasardb__qdb_error, 1},
    {"_quasardb__qdb_query_find", (DL_FUNC) &_quasardb__qdb_query_find, 2},
    {"_quasardb__qdb_version", (DL_FUNC) &_quasardb__qdb_version, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_quasardb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
